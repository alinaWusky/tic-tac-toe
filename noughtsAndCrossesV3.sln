using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace noughtsAndCrossesV3
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        
        //Customise board size (N x M) and rules
        int howManyAcross = 7;
        int howManyDown = 7;
        int connectHowMany = 4;

        int buttonSize = 70; //Size of buttons in pixels

        bool playerX_turn = true;
        bool playerO_turn = false;

        int disabledButtons = 0; 
        public void Form1_Load(object sender, EventArgs e)
        {
            this.AutoSize = true;

            //Creating the buttons dynamically
            for (int Y = 1; Y <= howManyDown; Y++)
            {
                for (int X = 1; X <= howManyAcross; X++)
                {
                    Button button = new Button();

                    button.Name = X + "-" + Y;
                    button.Text = "";
                    
                    button.Font = new Font(button.Font.FontFamily, buttonSize/2);
                    button.Size = new Size(buttonSize, buttonSize);
                    button.Location = new Point(((X - 1) * buttonSize), (howManyDown * buttonSize - (Y) * buttonSize));

                    button.Click += new EventHandler(AllButton_Click);
                    this.Controls.Add(button);
                }
            }
            //Calculating the ways to win connection horizontally
            for (int Y = 1; Y <= howManyDown; Y++)
            {
                for (int startX = 1; startX <= ((howManyAcross + 1) - connectHowMany); startX++)
                {
                    List<string> sublistWin = new List<string>();

                    for (int X = startX; X < (connectHowMany + startX); X++)
                    {
                        sublistWin.Add(X + "-" + Y);
                    }
                    winConditions.listWin.Add(sublistWin);
                }
            }
            //Calculating the ways to win connecting vertically
            for (int X = 1; X <= howManyAcross; X++)
            {
                for (int startY = 1; startY <= ((howManyDown + 1) - connectHowMany); startY++)
                {
                    List<string> sublistWin = new List<string>();

                    for (int Y = startY; Y < (connectHowMany + startY); Y++)
                    {
                        sublistWin.Add(X + "-" + Y);
                    }
                    winConditions.listWin.Add(sublistWin);
                }
            }
            
            //Calculating the ways to win diagonally (y = x)
            for (int Y = 1; Y <= howManyDown; ++Y)
            {
                for (int X = 1; X <= howManyAcross; ++X)
                {
                    if (((howManyAcross + 1 - X) >= connectHowMany) && ((howManyDown + 1 - Y >= connectHowMany)))
                    {
                        List<string> sublistWin = new List<string>();
                        int y = Y;
                        for (int x = X; x <= Math.Max(howManyAcross, howManyDown); ++x)
                        {
                            sublistWin.Add(x + "-" + y);
                            ++y;
                        }
                        winConditions.listWin.Add(sublistWin);
                    }
                }
            }
            //Calculating the ways to win anti-diagonally (y = -x)
            for (int Y = 1; Y <= howManyDown; ++Y)
            {
                for (int X = 1; X <= howManyAcross; ++X)
                {
                    if (X >= connectHowMany && (howManyDown + 1 - Y >= connectHowMany))
                    {
                        List<string> sublistWin = new List<string>();
                        int x = X;
                        for (int y = Y; y <= Math.Max(howManyAcross, howManyDown); ++y)
                        {
                            sublistWin.Add(x + "-" + y);
                            --x;
                        }
                        winConditions.listWin.Add(sublistWin);
                    }
                }
            }
            
            System.Diagnostics.Debug.WriteLine(winConditions.listWin.Count);

        }
        //This class stores all the possible winning moves
        class winConditions
        {
            public static List<List<string>> listWin = new List<List<string>>();
        }
        List<string> playerX_claim = new List<string>();
        List<string> playerO_claim = new List<string>();

        /// <summary>
        /// Handles Button Click events
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void AllButton_Click(object sender, EventArgs e)
        {
            Button btn = (Button)sender;

            for (int Y = 1; Y < howManyDown + 1; Y++)
            {
                for (int X = 1; X < howManyAcross + 1; X++)
                {
                    if (btn.Name == (X + "-" + Y))
                    {
                        var buttns = (Button)Controls[X + "-" + Y];

                        buttns.Enabled = false;
                        buttns.BackColor = System.Drawing.Color.LightPink;
                        disabledButtons++;

                        //If player X pressed the button
                        if (playerX_turn)
                        {
                            buttns.Text = "X";

                            playerX_claim.Add($"{X}-{Y}");

                            for (int i = 0; i < winConditions.listWin.Count; i++)
                            {
                                List<string> aCondition = new List<string>();

                                for (int j = 0; j < connectHowMany; j++)
                                {
                                    aCondition.Add(winConditions.listWin[i][j]);
                                }
                                bool ifSubset = !aCondition.Except(playerX_claim).Any();

                                if (ifSubset)
                                {
                                    for (int k = 0; k < aCondition.Count; ++k)
                                    {
                                        var buttnsCond = (Button)Controls[aCondition[k]];
                                        buttnsCond.BackColor = System.Drawing.Color.LightGreen;
                                    }
                                    MessageBox.Show("X Wins!");
                                }
                            }
                        }
                        //If player O pressed the button
                        else if (playerO_turn)
                        {
                            buttns.Text = "O";

                            playerO_claim.Add($"{X}-{Y}");

                            for (int i = 0; i < winConditions.listWin.Count; i++)
                            {
                                List<string> aCondition = new List<string>();

                                for (int j = 0; j < connectHowMany; j++)
                                {
                                    aCondition.Add(winConditions.listWin[i][j]);
                                }
                                bool ifSubset = !aCondition.Except(playerO_claim).Any();

                                if (ifSubset)
                                {
                                    for (int k = 0; k < aCondition.Count; ++k)
                                    {
                                        var buttnsCond = (Button)Controls[aCondition[k]];
                                        buttnsCond.BackColor = System.Drawing.Color.LightGreen;
                                    }
                                    MessageBox.Show("O Wins!");
                                }
                            }
                        
                        }
                        //In an event of a draw
                        if (disabledButtons == howManyAcross * howManyDown)
                        {
                            MessageBox.Show("Draw.");
                        }
                        //Change turns after click
                        playerX_turn = !playerX_turn;
                        playerO_turn = !playerO_turn;
                    }
                }
            }
        }
    }
}

